name: CI
on:
  workflow_dispatch:
    inputs:
      REGISTRY_URL:
        description: 'Docker Registry URL'
        required: true
        default: 'anwapplication.azurecr.io'
        type: choice
        options:
          - anwapplication.azurecr.io
      
  push:
    branches: ['*']
    paths-ignore:
      - 'microsite/**'
      - '.github/workflows/deploy-microsite.yml'
  pull_request:
    branches: [dev]
    types: [closed]
    paths-ignore:
      - 'microsite/**'
      - '.github/workflows/deploy-microsite.yml'

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test:
    runs-on: ubuntu-latest
    strategy: 
      fail-fast: false
      matrix:
        node-version: [20.x]
    name: Install ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/build
        with:
          node-version: ${{ matrix.node-version }}
      - name: lint
        run: yarn lint
        continue-on-error: true
      - name: test and upload coverage
        continue-on-error: true
        run: |
          yarn test
          bash <(curl -s https://codecov.io/bash)
          bash <(curl -s https://codecov.io/bash) -f packages/client/coverage/* -F client
          bash <(curl -s https://codecov.io/bash) -f packages/core/coverage/* -F core
          bash <(curl -s https://codecov.io/bash) -f packages/app/coverage/* -F app
          bash <(curl -s https://codecov.io/bash) -f packages/api/coverage/* -F api
          bash <(curl -s https://codecov.io/bash) -f packages/cli/coverage/* -F cli
          bash <(curl -s https://codecov.io/bash) -f packages/aws/coverage/* -F aws
          bash <(curl -s https://codecov.io/bash) -f packages/gcp/coverage/* -F gcp
          bash <(curl -s https://codecov.io/bash) -f packages/azure/coverage/* -F azure
      - name: integration tests
        run: yarn test:integration
        continue-on-error: true
  build:
    needs: lint-test
    runs-on: ubuntu-latest
    strategy: 
      fail-fast: false
      matrix:
        node-version: [20.x]
    name: Build ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node ${{ matrix.node-version}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version}}
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache global yarn cache
        uses: actions/cache@v4
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: build-packages
        run: |
          yarn lerna run build --ignore @cloud-carbon-footprint/client --ignore @cloud-carbon-footprint/cli --ignore @cloud-carbon-footprint/create-app --ignore @cloud-carbon-footprint/integration-tests
      - name: build-client
        run: |
          cd packages/client
          ./create_client_env_file.sh
          yarn build:app
          cd ../..
      - name: build-workspace
        run: |
          yarn lerna run build:workspace
          yarn lerna run build:update
      - name: zip artifact
        run: zip dist-workspace.zip dist-workspace/* -r
      - uses: actions/upload-artifact@v4
        with:
          name: dist-workspace-${{ matrix.node-version}}
          path: dist-workspace.zip

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: setup node ${{ matrix.node-version}}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version}}
    - name: cache all node_modules
      id: cache-modules
      uses: actions/cache@v4
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
    - name: find location of global yarn cache
      id: yarn-cache
      if: steps.cache-modules.outputs.cache-hit != 'true'
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: cache global yarn cache
      uses: actions/cache@v4
      if: steps.cache-modules.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: yarn install
      if: steps.cache-modules.outputs.cache-hit != 'true'
      run: yarn install
    - name: build packages
      run: |
        yarn lerna run build
        cd packages/client
        ./create_client_env_file.sh
        yarn build:app
        cd ../..
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: build and save docker images
      run: |
        api="api-$(date +%Y%m%d%H%M%S)"
        client="client-$(date +%Y%m%d%H%M%S)"
        docker build -t ${{ inputs.REGISTRY_URL }}/ccf-client:$client packages/client
        docker build -t ${{ inputs.REGISTRY_URL }}/ccf-api:$api packages/api
        docker save ${{ inputs.REGISTRY_URL }}/ccf-client:$client | gzip > client-${{ github.ref }}.tar.gz
        docker save ${{ inputs.REGISTRY_URL }}/ccf-api:$api | gzip > api-${{ github.ref }}.tar.gz
    - uses: actions/upload-artifact@v4
      name: Upload client docker tar
      with:
        name: client-${{ github.ref }}.tar.gz
        path: client.tar.gz
    - uses: actions/upload-artifact@v4
      name: Upload api docker tar
      with:
        name: api-${{ github.ref }}.tar.gz
        path: api.tar.gz
    