name: CI
on:
  workflow_dispatch:
    inputs:
      REGISTRY_URL:
        description: 'Docker Registry URL'
        required: true
        default: anwapplication.azurecr.io
        type: choice
        options:
          - anwapplication.azurecr.io
      
  push:
    branches: ['*']
    paths-ignore:
      - 'microsite/**'
      - '.github/workflows/**'
  pull_request:
    branches: [dev]
    types: [closed]
    paths-ignore:
      - 'microsite/**'
      - '.github/workflows/**'

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test:
    runs-on: ubuntu-latest
    strategy: 
      fail-fast: false
      matrix:
        node-version: [20.x]
    name: Install ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/build
        with:
          node-version: ${{ matrix.node-version }}
      - name: lint
        run: yarn lint
        continue-on-error: true
      - name: test and upload coverage
        continue-on-error: true
        run: |
          yarn test
          bash <(curl -s https://codecov.io/bash)
          bash <(curl -s https://codecov.io/bash) -f packages/client/coverage/* -F client
          bash <(curl -s https://codecov.io/bash) -f packages/core/coverage/* -F core
          bash <(curl -s https://codecov.io/bash) -f packages/app/coverage/* -F app
          bash <(curl -s https://codecov.io/bash) -f packages/api/coverage/* -F api
          bash <(curl -s https://codecov.io/bash) -f packages/cli/coverage/* -F cli
          bash <(curl -s https://codecov.io/bash) -f packages/aws/coverage/* -F aws
          bash <(curl -s https://codecov.io/bash) -f packages/gcp/coverage/* -F gcp
          bash <(curl -s https://codecov.io/bash) -f packages/azure/coverage/* -F azure
      - name: integration tests
        run: yarn test:integration
        continue-on-error: true
  build:
    needs: lint-test
    runs-on: ubuntu-latest
    strategy: 
      fail-fast: false
      matrix:
        node-version: [20.x]
    name: Build ${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/build
        with:
          node-version: ${{ matrix.node-version }}
      - name: build-packages
        run: |
          yarn lerna run build --ignore @cloud-carbon-footprint/client --ignore @cloud-carbon-footprint/cli --ignore @cloud-carbon-footprint/create-app --ignore @cloud-carbon-footprint/integration-tests
      - name: build-client
        run: |
          cd packages/client
          chmod +x create_client_env_file.sh
          ./create_client_env_file.sh
          yarn build:app
          cd ../..
        env:
          REACT_APP_MSAL_AUTHORITY: "%REACT_APP_MSAL_AUTHORITY%"
          REACT_APP_MSAL_CLIENT_ID: "%REACT_APP_MSAL_CLIENT_ID%"
          REACT_APP_MSAL_REDIRECT_URI: "%REACT_APP_MSAL_REDIRECT_URI%" 
      - name: build-workspace
        run: |
          yarn lerna run build:workspace
          yarn lerna run build:update
      - name: zip artifact
        run: zip dist-workspace.zip dist-workspace/* -r
      - uses: actions/upload-artifact@v4
        with:
          name: dist-workspace-${{ matrix.node-version}}
          path: dist-workspace.zip

  docker-build:
    runs-on: ubuntu-latest
    # needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Set default value
      id: acr
      run: |
        acr=${{ github.event.inputs.REGISTRY_URL }}
        echo "::set-output name=acr_url::${acr:-"anwapplication.azurecr.io"}"
    - uses: ./.github/build
      with:
        node-version: ${{ matrix.node-version }}
    - name: build packages
      run: |
        yarn lerna run build
        cd packages/client
        chmod +x create_client_env_file.sh
        ./create_client_env_file.sh
        cat .env
        yarn build:app
        cd ../..
      env:
        REACT_APP_MSAL_AUTHORITY: "%REACT_APP_MSAL_AUTHORITY%"
        REACT_APP_MSAL_CLIENT_ID: "%REACT_APP_MSAL_CLIENT_ID%"
        REACT_APP_MSAL_REDIRECT_URI: "%REACT_APP_MSAL_REDIRECT_URI%" 
        REACT_APP_MSAL_POST_LOGOUT_REDIRECT_URI: "%REACT_APP_MSAL_POST_LOGOUT_REDIRECT_URI%"
    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        login-server: ${{ steps.acr.outputs.acr_url}}
              
    - name: build and save docker images
      run: |
        api="api-$(date +%Y%m%d%H%M%S)"
        client="client-$(date +%Y%m%d%H%M%S)"
        cp .yarnrc packages/api/.yarnrc
        echo "Setting NPM Token"
        sed -i "s,%NPM_AUTH_TOKEN%,$NPM_AUTH_TOKEN,g" packages/api/.yarnrc
        cat packages/api/.yarnrc
        docker build -t ${{ steps.acr.outputs.acr_url}}/ccf-client:$client packages/client
        docker build -t ${{ steps.acr.outputs.acr_url}}/ccf-api:$api packages/api
        ccf_client="$(docker image ls --format {{.Repository}}:{{.Tag}} | grep ccf-client)"
        ccf_api="$(docker image ls --format {{.Repository}}:{{.Tag}} | grep ccf-api)"
        docker save $ccf_client -o client_${{ github.sha }}.tar
        docker save $ccf_api -o api_${{ github.sha }}.tar
        gzip -v client_${{ github.sha }}.tar
        gzip -v api_${{ github.sha }}.tar
        mkdir -p /tmp/_images
        cp *.tar.gz /tmp/_images
      env:
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
    - uses: actions/upload-artifact@v4
      name: Upload docker images
      with:
        name: docker_images
        path: /tmp/_images
    