name: Reusable deployment workflow

on:
  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
      RELEASE:
        required: true
        type: string
      REGISTRY_URL:
        required: true
        type: string

jobs:
  deploy:
    name: Deploy to ${{ inputs.target-env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-env }}

    steps:
      - run: echo "ðŸŽ‰ target evn ${{ inputs.target-env}}"

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: ci.yml
          workflow_conclusion: success
          branch: dev
          check_artifacts:  false

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Install ACR-Tag Utility
        run: |
          bash scripts/install_acr_tag.sh -v ${{ inputs.acr_version }} -d ./tools -t ./temp
        
      - name: Get Next Tag
        id: get_next_tag
        run: |
          api=$(bash scripts/get_next_tag.sh -t ${{ secrets.TAG_TYPE }} -e $${{ inputs.target-env }} -r ccf-api -s ${{ inputs.REGISTRY_URL }} -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} -v ${{ inputs.RELEASE }})
          client=$(bash scripts/get_next_tag.sh -t ${{ secrets.TAG_TYPE }} -e ${{ inputs.target-env }} -r ccf-client -s ${{ inputs.REGISTRY_URL }} -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} -v ${{ inputs.RELEASE }})
          echo "::set-output name=api_docker_tag::$api"
          echo "::set-output name=client_docker_tag::$client"
      
      - name: Load and Push Docker Images
        run: |
          bash scripts/load_push_images.sh -i ccf-api -e ${{ secrets.target-env }}-t ${{ steps.get_next_tag.outputs.api_docker_tag }}
          bash scripts/load_push_images.sh -i ccf-client -e ${{ secrets.target-env }} -t ${{ steps.get_next_tag.outputs.client_docker_tag }}
      
      - name: Create a release tag
        id: create_tag
        run: node scripts/create-release-tag.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create latest release tag
        id: create_latest_tag
        uses: EndBug/latest-tag@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        