name: Reusable deployment workflow

on:
  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
      RELEASE:
        required: true
        type: string
      REGISTRY_URL:
        required: true
        type: string
      ACR_VERSION:
        required: true
        type: string

jobs:
  deploy:
    name: Deploy to ${{ inputs.target-env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.target-env }}

    steps:
      - run: echo "ðŸŽ‰ target evn ${{ inputs.target-env}}"
      - uses: actions/checkout@v4
      - name: Set default values
        id: acr
        run: |
          acr=${{ github.event.inputs.REGISTRY_URL }}
          echo "::set-output name=acr_url::${acr:-"anwapplication.azurecr.io"}"
          release=${{ github.event.inputs.RELEASE }}
          echo "::set-output name=release_version::${release:-"latest"}"
          acr_tag=${{ github.event.inputs.ACR_VERSION }}
          echo "::set-output name=acr_version::${acr_tag:-"latest"}"

      - name: Safe download workflow artifact
        uses: Legit-Labs/action-download-artifact@v2.18.0
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: CI
          workflow_conclusion: success
          branch: dev
          name: docker_images
          path: ./artifacts
          check_artifacts: true  

      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          login-server: ${{ steps.acr.outputs.acr_url}}
      
      - name: Install ACR-Tag Utility
        run: |
          bash scripts/install_acr_tag.sh -v ${{ steps.acr.outputs.acr_version }} -d ./tools -t ./temp
        
      - name: Get Next Tag
        id: get_next_tag
        run: |
          api=$(bash scripts/get_next_tag.sh -t ${{ secrets.TAG_TYPE }} -e $${{ inputs.target-env }} -r ccf-api -s ${{ steps.acr.outputs.acr_url}} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} -v ${{ steps.acr.outputs.release_version}}
          client=$(bash scripts/get_next_tag.sh -t ${{ secrets.TAG_TYPE }} -e ${{ inputs.target-env }} -r ccf-client -s ${{ steps.acr.outputs.acr_url}} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} -v ${{ steps.acr.outputs.release_version}}
          echo "::set-output name=api_docker_tag::$api"
          echo "::set-output name=client_docker_tag::$client"
      
      - name: Load and Push Docker Images
        run: |
          bash scripts/load_push_images.sh -i ccf-api -e ${{ secrets.target-env }}-t ${{ steps.get_next_tag.outputs.api_docker_tag }}
          bash scripts/load_push_images.sh -i ccf-client -e ${{ secrets.target-env }} -t ${{ steps.get_next_tag.outputs.client_docker_tag }}
      
      - name: Create a release tag
        id: create_tag
        run: node scripts/create-release-tag.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create latest release tag
        id: create_latest_tag
        uses: EndBug/latest-tag@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        